(this.webpackJsonplmc=this.webpackJsonplmc||[]).push([[0],{15:function(e,t,r){},16:function(e,t,r){},19:function(e,t,r){},21:function(e,t,r){"use strict";r.r(t);var n=r(1),c=r.n(n),a=r(8),s=r.n(a),i=(r(15),r(7)),o=r(3),l=(r(16),r(10)),u=r(9),h=["LDA","STA","LOA","ADD","SUB","INP","OUT","OTC","HLT","BRZ","BRP","BRA","DAT"],d=["INP","OUT","OTC","HLT"],j={INP:901,OUT:902,OTC:912,HLT:0},b={LDA:"5",STA:"3",LOA:"4",ADD:"1",SUB:"2",BRZ:"7",BRP:"8",BRA:"6",DAT:""},m=function(e){for(var t=new Array(100).fill(0),r=e.split(/\r?\n/).filter((function(e){return 0!==e.length})).map((function(e,t){return e.replace(/\/\/.*?$/,"").split(/\s+/).filter((function(e){return 0!==e.length})).map((function(e){return function(e,t){return isNaN(e)||parseInt(e)!==parseFloat(e)?h.includes(e)?{type:"instruction",value:e,line:t}:e.match(/^[A-Z][A-Z0-9]*$/)?{type:"label",value:e,line:t}:{type:"invalid",value:e,line:t}:{type:"int",value:parseInt(e),line:t}}(e.toUpperCase(),t+1)}))})).filter((function(e){return 0!==e.length})),n={},c=0,a=0;a<r.length;a++){var s=r[a];"label"===s[0].type&&(n[s[0].value]=c,r[a]=s=s.slice(1)),c+=s.filter((function(e){return"instruction"===e.type})).length}var i,o=(r=r.filter((function(e){return 0!==e.length}))).flat(),l=Object(u.a)(o);try{for(l.s();!(i=l.n()).done;){var m=i.value;if("invalid"===m.type)return{memory:new Array(100).fill(0),error:"Unexpected token ".concat(m.value),errorLoc:m}}}catch(v){l.e(v)}finally{l.f()}for(var O=0,T=0;T<o.length;T++){var p=o[T];if("instruction"!==p.type)return{memory:new Array(100).fill(0),error:"Expected instruction, got ".concat(p.value),errorLoc:p};var A=p.value;if(d.includes(A))t[O]=j[A],O++;else{var f=b[A],g=o[T+1],x=f;if("int"===g.type)"DAT"===A?x=g.value.toString():x+=g.value.toString().padStart(2,"0");else{if("label"!==g.type)return{memory:new Array(100).fill(0),error:"Expected value, got ".concat(g.value),errorLoc:p};if(!(g.value in n))return{memory:new Array(100).fill(0),error:"Label ".concat(g.value," is not bound"),errorLoc:p};"DAT"===A?x=n[g.value].toString():x+=n[g.value].toString().padStart(2,"0")}if(x.length>3)return{memory:new Array(100).fill(0),error:"Values cannot exceed 3 digits (got ".concat(x,")"),errorLoc:p};t[O]=parseInt(x),O++,T++}if(O>99)return{memory:new Array(100).fill(0),error:"Exceeded memory capacity of 100 @ ".concat(p.value),errorLoc:p}}return{memory:t,error:null,errorLoc:null}},O=function(e,t,r,n,c,a){r.pc=t;var s=e[r.pc++].toString().padStart(3,"0"),i=parseInt(s[0]),o=10*parseInt(s[1])+parseInt(s[2]);r.ir=i,r.ar=o;var l=!1,u=!1;switch(c&&a&&(r.ac=parseInt(a)),i){case 0:l=!0;break;case 1:r.ac=r.ac+e[o];break;case 2:r.ac=r.ac-e[o];break;case 3:e[o]=r.ac;break;case 4:var h=r.ac,d=o+h>=100?99:o+h;r.ac=e[d];break;case 5:r.ac=e[o];break;case 6:r.pc=o;break;case 7:0===r.ac&&(r.pc=o);break;case 8:r.ac>=0&&(r.pc=o);break;case 9:1===o?u=!0:2===o?n+=r.ac+" ":12===o&&(n+=String.fromCharCode(r.ac))}return{memory:e,ip:r.pc,registers:r,output:n,halt:l,waitingForInput:u}},T={defaultToken:"",keywords:["LDA","STA","LOA","ADD","SUB","INP","OUT","OTC","HLT","BRZ","BRP","BRA","DAT"],tokenizer:{root:[{include:"@whitespace"},[/[a-zA-Z][a-zA-Z0-9]*/,{cases:{"@keywords":"keyword","@default":"type.identifier"}}],[/\d+/,"number"]],whitespace:[[/[ \t\r\n]+/,"white"],[/\/\/.*$/,"comment"]]}},p={comments:{lineComment:"//"}},A={Addition:["// Input two numbers, sum them, and output the result","        INP","        STA FIRST","        INP","        ADD FIRST","        OUT","        HLT","FIRST   DAT 0"].join("\n"),"0..N":["// Implements printing 0..N (inc. exc.)","// Similar to for(int i = 0; i < N; i++) or for i in range(N)","// in high-level languages","        INP","        STA EVAL","","// Compare SVAL and EVAL, and if SVAL is equal to or greater than EVAL,","// Jump to END","TOP     LDA SVAL","        SUB EVAL","        BRP END","","// Output SVAL and increment it by one, looping back to TOP","        LDA SVAL","        OUT","        ADD ONE","        STA SVAL","        BRA TOP","","END     HLT","","// Variables: Start Value and End Value","SVAL    DAT 0","EVAL    DAT 0","// Constant 1","ONE     DAT 1"].join("\n"),Max:["// Implements max(a, b) -> returns the higher value of the two.","        INP","        STA FIRST","        INP","        STA SECOND","// Subtract second - first, and if positive second must be greater","        SUB FIRST","        BRP GREATER","// Otherwise, output first and skip over printing second","        LDA FIRST","        OUT","        BRA END","","// Output second","GREATER LDA SECOND","        OUT","","END     HLT","","// Variables","FIRST   DAT 0","SECOND  DAT 0"].join("\n"),Divide:["// Input two values","      INP","      STA VAL1","      INP","      STA VAL2","      ","// Loop, subtracting the val2 and counting iterations","","LOOP  LDA VAL1","      SUB VAL2","// Stop looping when the subtraction result is negative","      BRP BODY","      BRA DONE","","BODY  STA VAL1","      LDA COUNT","      ADD ONE","      STA COUNT","      BRA LOOP","","// After looping, print the count and the remainder (left in val1)","DONE  LDA COUNT","      OUT","      LDA VAL1","      BRZ END","      OUT","END   HLT","","// Variables","VAL1  DAT 0","VAL2  DAT 0","COUNT DAT 0","// Constant 1","ONE   DAT 1"].join("\n"),ASCII:["// Loop through and print all printable ASCII characters","// Similar to 0..N example, but from 33..127","","// Compare FPRINT and LPRINT, branch to end if FPRINT is greater or equal","TOP     LDA FPRINT","        SUB LPRINT","        BRP END","","// Print character from ASCII code","        LDA FPRINT","        OTC","// Increment FPRINT and loop","        ADD ONE","        STA FPRINT","        BRA TOP","","END     HLT","","// Variable FPRINT counts starting from 33","FPRINT  DAT 33","// Constant LPRINT is the last printable character + 1","LPRINT  DAT 127","// Constant 1","ONE     DAT 1"].join("\n"),"Hello World":['// Prints the string "Hello, World!" to the output',"// Loop, checking if the OFFSET is less than LENGTH","BEGIN   LDA LENGTH","        SUB OFFSET","        BRZ END","        BRP PRINT","        BRA END","","// Offset from START by OFFSET to extract the character","// The same as START[OFFSET] in high-level languages","PRINT   LDA OFFSET","// LOA = Load Offset To Accumulator","        LOA START","// OTC = Output accumulator as character (e.g. 65 -> A)","        OTC","        LDA OFFSET","        ADD ONE","        STA OFFSET","        BRA BEGIN","","END     HLT","","// Variable","OFFSET  DAT 0",'// Constant: Encode "Hello, World!" as character codes, one byte after the other',"START   DAT 72","        DAT 101","        DAT 108","        DAT 108","        DAT 111","        DAT 44","        DAT 32","        DAT 87","        DAT 111","        DAT 114","        DAT 108","        DAT 100","        DAT 33","// Constant length of the string","LENGTH  DAT 13","// Constant 1","ONE     DAT 1"].join("\n")},f=(r(19),r(0));function g(){return Object(f.jsxs)("div",{className:"description",children:[Object(f.jsxs)("section",{children:[Object(f.jsx)("h2",{children:"Memory"}),Object(f.jsxs)("p",{children:["The memory in the LMC is made from 100 address/mailboxes, from 0 to 99.",Object(f.jsx)("br",{}),"Each value in memory can be up to 3 digits (decimal) long.",Object(f.jsx)("br",{}),"As the LMC follows Von Neumann architecture, both the data and instructions are stored in the same memory.",Object(f.jsx)("br",{})]})]}),Object(f.jsxs)("section",{children:[Object(f.jsx)("h2",{children:"Registers"}),Object(f.jsxs)("p",{children:["Each register has a specific purpose and may only hold one value.",Object(f.jsxs)("ul",{children:[Object(f.jsx)("li",{children:"The Program Counter Register holds the address of the next instruction to be fetched."}),Object(f.jsx)("li",{children:"The Instruction Register holds the instruction part of the value fetched from memory (the first digit)."}),Object(f.jsx)("li",{children:"The Address Register holds the address/data of the value fetched from memory (the second & third digit)."}),Object(f.jsx)("li",{children:"The Accumulator Register holds the results of instructions, and is used with instructions such as ADD for the first operand."})]})]})]}),Object(f.jsxs)("section",{children:[Object(f.jsx)("h2",{children:"Assembly Language"}),Object(f.jsx)("p",{children:"The Assembly Language used for the LMC is simplistic. It can only recognise line comments (//), integer numbers, labels, and instructions. If a line has a label it must come before the instruction. Unlike in some other LMC assembly languages, DAT must always take a value. There can only be one instruction and label per line, and each instruction takes either 0 or 1 arguments."})]}),Object(f.jsxs)("section",{children:[Object(f.jsx)("h2",{children:"Instructions - Standard"}),Object(f.jsxs)("div",{children:[Object(f.jsx)("h3",{children:"HLT"}),Object(f.jsx)("small",{children:"Encoding: 000"}),Object(f.jsx)("p",{children:"The halt instruction (HLT) stops the execution of the program."})]}),Object(f.jsxs)("div",{children:[Object(f.jsx)("h3",{children:"ADD"}),Object(f.jsx)("small",{children:"Encoding: 1xx"}),Object(f.jsx)("p",{children:"The add instruction (ADD) takes the value in the accumulator and the value at the given address and adds them. The result is stored back into the accumulator."})]}),Object(f.jsxs)("div",{children:[Object(f.jsx)("h3",{children:"SUB"}),Object(f.jsx)("small",{children:"Encoding: 2xx"}),Object(f.jsx)("p",{children:"The subtract instruction (SUB) takes the value in the accumulator and the value at the given address and subtracts them. The result is stored back into the accumulator."})]}),Object(f.jsxs)("div",{children:[Object(f.jsx)("h3",{children:"STA"}),Object(f.jsx)("small",{children:"Encoding: 3xx"}),Object(f.jsx)("p",{children:"The store accumulator instruction (STA) takes the value in the accumulator and stores it into the given memory address. The value of the accumulator does not change."})]}),Object(f.jsxs)("div",{children:[Object(f.jsx)("h3",{children:"LDA"}),Object(f.jsx)("small",{children:"Encoding: 5xx"}),Object(f.jsx)("p",{children:"The load accumulator instruction (LDA) takes the value at the given memory address and stores it into the accumulator."})]}),Object(f.jsxs)("div",{children:[Object(f.jsx)("h3",{children:"BRA"}),Object(f.jsx)("small",{children:"Encoding: 6xx"}),Object(f.jsx)("p",{children:"The branch always instruction (BRA) sets the program counter to the given address. The value of the accumulator does not change."})]}),Object(f.jsxs)("div",{children:[Object(f.jsx)("h3",{children:"BRZ"}),Object(f.jsx)("small",{children:"Encoding: 7xx"}),Object(f.jsx)("p",{children:"The branch if zero instruction (BRZ) sets the program counter to the given address if the accumulator's value is 0. The value of the accumulator does not change."})]}),Object(f.jsxs)("div",{children:[Object(f.jsx)("h3",{children:"BRP"}),Object(f.jsx)("small",{children:"Encoding: 8xx"}),Object(f.jsx)("p",{children:"The branch if positive instruction (BRP) sets the program counter to the given address if the accumulator's value is positive, including 0 (i.e. the value is not negative). The value of the accumulator does not change."})]}),Object(f.jsxs)("div",{children:[Object(f.jsx)("h3",{children:"INP"}),Object(f.jsx)("small",{children:"Encoding: 901"}),Object(f.jsx)("p",{children:"The input instruction (INP) waits for the user to enter a value, then stores this value into the accumulator."})]}),Object(f.jsxs)("div",{children:[Object(f.jsx)("h3",{children:"OUT"}),Object(f.jsx)("small",{children:"Encoding: 902"}),Object(f.jsx)("p",{children:"The output instruction (OUT) takes the accumulator's value and outputs it to the output box. The value of the accumulator does not change."})]})]}),Object(f.jsxs)("section",{children:[Object(f.jsx)("h2",{children:"Instructions - Non Standard"}),Object(f.jsxs)("div",{children:[Object(f.jsx)("h3",{children:"OTC"}),Object(f.jsx)("small",{children:"Encoding: 912"}),Object(f.jsx)("p",{children:"The output character instruction (OUT) takes the accumulator's value and converts it to a character (using it as a character code). This character is then outputted to the output box. The value of the accumulator does not change."})]}),Object(f.jsxs)("div",{children:[Object(f.jsx)("h3",{children:"LOA"}),Object(f.jsx)("small",{children:"Encoding: 4xx"}),Object(f.jsx)("p",{children:"The load offset to accumulator instruction (LOA) takes the accumulator's value and adds it to the given address. Then this computed address' value is stored into the accumulator."})]})]})]})}var x=["// Input two numbers, sum them, and output the result","        INP","        STA FIRST","        INP","        ADD FIRST","        OUT","        HLT","FIRST   DAT 0"].join("\n"),v=function(e){e.languages.getLanguages().some((function(e){return"lmc"===e.id}))||(e.languages.register({id:"lmc"}),e.languages.setMonarchTokensProvider("lmc",T),e.languages.setLanguageConfiguration("lmc",p))};var D=function(){var e=Object(n.useRef)(null),t=Object(n.useState)(Array(100).fill(0)),r=Object(o.a)(t,2),c=r[0],a=r[1],s=Object(n.useState)(0),u=Object(o.a)(s,2),h=u[0],d=u[1],j=Object(n.useState)({pc:0,ir:0,ar:0,ac:0}),b=Object(o.a)(j,2),T=b[0],p=b[1],D=Object(n.useState)(""),S=Object(o.a)(D,2),L=S[0],N=S[1],I=Object(n.useState)(""),R=Object(o.a)(I,2),y=R[0],E=R[1],P=Object(n.useState)(""),C=Object(o.a)(P,2),F=C[0],B=C[1],k=Object(n.useState)(!1),w=Object(o.a)(k,2),V=w[0],U=w[1],H=Object(n.useState)(!1),M=Object(o.a)(H,2),Z=M[0],G=M[1],z=Object(n.useState)([]),W=Object(o.a)(z,2),q=W[0],J=W[1],$=Object(n.useState)(!1),Y=Object(o.a)($,2),K=Y[0],Q=Y[1],X=Object(n.useState)("60"),_=Object(o.a)(X,2),ee=_[0],te=_[1],re=Object(n.useState)(60),ne=Object(o.a)(re,2),ce=ne[0],ae=ne[1],se=Object(n.useRef)(null),ie=Object(n.useRef)(null),oe=function(e,t){return e?t?"red-border":"green-border":""},le=function(){clearInterval(ie.current)};return Object(f.jsxs)("div",{className:"App",children:[Object(f.jsx)("h1",{className:"title",children:"Little Man Computer"}),Object(f.jsxs)("div",{className:"buttons",children:[Object(f.jsx)("button",{onClick:function(){le(),function(){var t=m(e.current.getValue());t.error?E("[".concat(t.errorLoc.line,"]: ").concat(t.error)):(a(t.memory),E(""))}(),d(0),p({pc:0,ir:0,ar:0,ac:0}),N(""),U(!1),G(!1),J([]),Q(!1)},children:"Assemble To RAM (reset)"}),Object(f.jsx)("button",{onClick:function(){if(""===y){var e=c,t=0,r={pc:0,ir:0,ar:0,ac:0},n=!1,s="",o=!1;ie.current=setInterval((function(){if(!o||se.current){var c=Object(i.a)(e),l=r.ac,u=O(e,t,r,s,o,se.current);e=u.memory,t=u.ip,r=u.registers,n=u.halt,s=u.output,o=u.waitingForInput,se.current&&(se.current=null),(n||t>=100)&&(clearInterval(ie.current),ie.current=null),t>=100&&(t=99),d(t),p(r),a(e),N(s),U(o),G(n);for(var h=[],j=0;j<e.length;j++)c[j]!==e[j]&&h.push(j);J(h),Q(l!==r.ac)}}),1e3/ce)}},children:"Run"}),Object(f.jsx)("button",{onClick:function(){""===y&&(le(),G(!0))},children:"Stop"}),Object(f.jsx)("button",{onClick:function(){if(""===y&&(clearInterval(ie.current),(!V||se.current)&&!(Z||h>=100))){var e,t=c,r=h,n=T,s="",o=V,l=Object(i.a)(t),u=n.ac,j=O(t,r,n,s,o,se.current);t=j.memory,r=j.ip,n=j.registers,e=j.halt,s=j.output,o=j.waitingForInput,se.current&&(se.current=null),(e||r>=100)&&(clearInterval(ie.current),ie.current=null),r>=100&&(r=99),d(r),p(n),a(t),N(s),U(o),G(e);for(var b=[],m=0;m<t.length;m++)l[m]!==t[m]&&b.push(m);J(b),Q(u!==n.ac)}},children:"Step"})]}),Object(f.jsxs)("main",{children:[Object(f.jsx)(l.a,{height:"90vh",width:"45vw",language:"lmc",theme:"vs-dark",defaultValue:x,beforeMount:v,onMount:function(t,r){e.current=t}}),Object(f.jsxs)("div",{className:"monitor",children:[Object(f.jsxs)("div",{className:"forms",children:[Object(f.jsxs)("form",{onSubmit:function(e){se.current=F.substring(0,3),B(""),e.preventDefault()},className:"input-form",autoComplete:"off",autoCapitalize:"off",autoCorrect:"off",children:[Object(f.jsx)("label",{htmlFor:"ioinput",className:V?"green-border":"",children:"Input"}),Object(f.jsx)("input",{type:"text",name:"ioinput",value:F,onChange:function(e){B(e.target.value)}})]}),Object(f.jsxs)("form",{onSubmit:function(e){var t=parseInt(ee)||60;t<=0&&(t=60),ae(t),e.preventDefault()},children:[Object(f.jsxs)("label",{htmlFor:"runspeed",children:["Speed (",ce,"Hz)"]}),Object(f.jsx)("input",{type:"number",name:"runspeed",value:ee,onChange:function(e){te(e.target.value)}})]}),Object(f.jsxs)("form",{children:[Object(f.jsx)("label",{htmlFor:"selectprogram",children:"Example"}),Object(f.jsx)("select",{onChange:function(t){e.current.setValue(A[t.target.value])},children:Object(f.jsx)(f.Fragment,{children:Object.keys(A).map((function(e){return Object(f.jsx)("option",{value:e,children:e},e)}))})})]})]}),Object(f.jsxs)("div",{className:"mem-reg-container",children:[Object(f.jsxs)("div",{className:"memory",children:[Object(f.jsx)("h2",{children:"Memory"}),Object(f.jsx)(f.Fragment,{children:function(){for(var e=[],t=0;t<c.length;t+=10){var r=c.slice(t,t+10);e.push(r)}return e.map((function(e,t){return Object(f.jsxs)("div",{className:"memory-row",children:[Object(f.jsxs)("p",{className:"memory-item",children:[10*t,": "]}),Object(f.jsx)(f.Fragment,{children:e.map((function(e,r){return Object(f.jsx)("p",{className:"memory-item ".concat(oe(10*t+r===h,Z)," ").concat(q.includes(10*t+r)?"yellow-border":""),children:e},"item"+10*t+r)}))})]},"memory"+t)}))}()})]}),Object(f.jsxs)("div",{className:"registers",children:[Object(f.jsx)("h2",{children:"Registers"}),Object(f.jsx)(f.Fragment,{children:function(){var e={pc:"Program Counter",ir:"Instruction",ar:"Address",ac:"Accumulator"};return Object.entries(T).map((function(t){var r=Object(o.a)(t,2),n=r[0],c=r[1];return Object(f.jsxs)("p",{style:{minWidth:e[n].length+2+3+"ch"},className:"register ".concat(oe("pc"===n,Z)," ").concat("ac"===n&&K?"yellow-border":""),children:[e[n],": ",c]},n)}))}()})]})]}),Object(f.jsxs)("div",{className:"output-box",children:[Object(f.jsx)("h2",{children:"Output"}),Object(f.jsx)("p",{className:"output ".concat(""!==y?"error-output":""),children:""===y?L:y})]})]})]}),Object(f.jsx)(g,{}),Object(f.jsxs)("footer",{children:["Open Source on ",Object(f.jsx)("a",{href:"https://github.com/qco-dev/lmc",children:"Github"}),"."]})]})};s.a.render(Object(f.jsx)(c.a.StrictMode,{children:Object(f.jsx)(D,{})}),document.getElementById("root"))}},[[21,1,2]]]);
//# sourceMappingURL=main.794b5eef.chunk.js.map