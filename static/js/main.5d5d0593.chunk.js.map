{"version":3,"sources":["assembler.js","emulator.js","App.js","index.js"],"names":["INSTRUCTIONS","UNARY_INSTRUCTIONS","UNARY_INSTRUCTION_CODE_MAP","BINARY_INSTRUCTION_FIRST_VALUE","assemble","source","memory","Array","fill","lines","split","filter","v","length","map","l","replace","w","word","isNaN","parseInt","parseFloat","includes","type","value","match","toToken","toUpperCase","labels","ip","i","line","slice","words","flat","memoryAddress","instruction","opcode","operand","form","toString","padStart","step","inIp","registers","output","input","pc","strMemValue","data","ir","ar","halt","waitingForInput","ac","App","editorRef","useRef","useState","setMemory","currentIp","setCurrentIp","setRegisters","setOutput","setInput","className","onClick","assembledMemory","current","getValue","localMem","localReg","out","height","width","theme","defaultValue","onMount","editor","monaco","htmlFor","name","onChange","event","target","onSubmit","preventDefault","per10mem","chunk","push","values","j","renderMemory","regToName","Object","entries","register","renderRegisters","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d5d0593.chunk.js","sourcesContent":["// Returns the memory array\r\n\r\nconst INSTRUCTIONS = [\"LDA\", \"STA\", \"ADD\", \"SUB\", \"INP\", \"OUT\", \"HLT\", \"BRZ\", \"BRP\", \"BRA\", \"DAT\"];\r\nconst UNARY_INSTRUCTIONS = [\"INP\", \"OUT\", \"HLT\"];\r\n\r\nconst UNARY_INSTRUCTION_CODE_MAP = {\r\n\t\"INP\": 901,\r\n\t\"OUT\": 902,\r\n\t\"HLT\": 0\r\n}\r\n\r\nconst BINARY_INSTRUCTION_FIRST_VALUE = {\r\n\t\"LDA\": \"5\",\r\n\t\"STA\": \"3\",\r\n\t\"ADD\": \"1\",\r\n\t\"SUB\": \"2\",\r\n\t\"BRZ\": \"7\",\r\n\t\"BRP\": \"8\",\r\n\t\"BRA\": \"6\",\r\n\t\"DAT\": \"\"\r\n}\r\n\r\nconst toToken = (word) => {\r\n\tif(!isNaN(word) && parseInt(word) === parseFloat(word)) {\r\n\t\treturn {\r\n\t\t\ttype: \"int\",\r\n\t\t\tvalue: parseInt(word)\r\n\t\t}\r\n\t}\r\n\telse if(INSTRUCTIONS.includes(word)) {\r\n\t\treturn {\r\n\t\t\ttype: \"instruction\",\r\n\t\t\tvalue: word\r\n\t\t}\r\n\t}\r\n\telse if(word.match(/^[A-Z]*$/)) {\r\n\t\treturn {\r\n\t\t\ttype: \"label\",\r\n\t\t\tvalue: word\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\t//TODO CHECK FOR INVALID TOKENS\r\n\t\treturn {\r\n\t\t\ttype: \"invalid\",\r\n\t\t\tvalue: word\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const assemble = (source) => {\r\n\tconst memory = new Array(100).fill(0);\r\n\r\n\tconst rawLines = source.split(/\\r?\\n/).filter(v => v.length !== 0);\r\n\r\n\tlet lines = rawLines.map(l => l.replace(/\\/\\/.*?$/, \"\").split(/\\s+/).filter(v => v.length !== 0).map(w => toToken(w.toUpperCase()))).filter(l => l.length !== 0)\r\n\r\n\tconst labels = {}\r\n\tlet ip = 0;\r\n\tfor(let i = 0; i < lines.length; i++) {\r\n\t\tlet line = lines[i];\r\n\r\n\t\tif(line[0].type === \"label\") {\r\n\t\t\tlabels[line[0].value] = ip;\r\n\t\t\tlines[i] = line = line.slice(1)\r\n\t\t}\r\n\t\tip += line.filter(w => w.type === \"instruction\").length;\r\n\t}\r\n\tlines = lines.filter(l => l.length !== 0)\r\n\r\n\tconst words = lines.flat();\r\n\r\n\tlet memoryAddress = 0;\r\n\tfor(let i = 0; i < words.length; i++) {\r\n\t\tconst word = words[i];\r\n\r\n\t\tif(word.type === \"instruction\") {\r\n\t\t\tconst instruction = word.value;\r\n\r\n\t\t\tif(UNARY_INSTRUCTIONS.includes(instruction)) {\r\n\t\t\t\tmemory[memoryAddress] = UNARY_INSTRUCTION_CODE_MAP[instruction];\r\n\t\t\t\tmemoryAddress++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconst opcode = BINARY_INSTRUCTION_FIRST_VALUE[instruction];\r\n\r\n\t\t\t\tconst operand = words[i + 1];\r\n\r\n\t\t\t\tlet form = opcode;\r\n\r\n\t\t\t\tif(operand.type === \"int\") {\r\n\t\t\t\t\tif(instruction === \"DAT\")\r\n\t\t\t\t\t\tform = operand.value.toString()\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tform += operand.value.toString().padStart(2, '0')\r\n\t\t\t\t}\r\n\t\t\t\telse if(operand.type === \"label\") {\r\n\t\t\t\t\t// TODO VERIFY LABEL EXISTS\r\n\t\t\t\t\tif(instruction === \"DAT\")\r\n\t\t\t\t\t\tform = operand.value.toString()\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tform += labels[operand.value].toString().padStart(2, '0');\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//TODO ERROR\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(form.length > 3) {\r\n\t\t\t\t\t//TODO ERROR\r\n\t\t\t\t}\r\n\t\t\t\tmemory[memoryAddress] = parseInt(form)\r\n\t\t\t\tmemoryAddress++;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//TODO ERROR\r\n\t\t}\r\n\t\t//TODO CHECK i < 100\r\n\t}\r\n\r\n\treturn memory;\r\n}","export const step = (memory, inIp, registers, output, input) => {\r\n\tregisters.pc = inIp;\r\n\tconst memValue = memory[registers.pc++];\r\n\r\n\tconst strMemValue = memValue.toString().padStart(3, '0')\r\n\tconst instruction = parseInt(strMemValue[0])\r\n\tconst data = parseInt(strMemValue[1]) * 10 + parseInt(strMemValue[2])\r\n\r\n\tregisters.ir = instruction;\r\n\tregisters.ar = data;\r\n\r\n\tlet halt = false;\r\n\tlet waitingForInput = false;\r\n\r\n\tif(input) {\r\n\t\tregisters.ac = parseInt(input)\r\n\t}\r\n\r\n\tswitch(instruction) {\r\n\t\t// HLT\r\n\t\tcase 0:\r\n\t\t\thalt = true;\r\n\t\t\tbreak;\r\n\t\t// ADD\r\n\t\tcase 1:\r\n\t\t\tregisters.ac = registers.ac + memory[data];\r\n\t\t\tbreak;\r\n\t\t// SUB\r\n\t\tcase 2:\r\n\t\t\tregisters.ac = registers.ac - memory[data];\r\n\t\t\tbreak;\r\n\t\t// STA\r\n\t\tcase 3:\r\n\t\t\tmemory[data] = registers.ac;\r\n\t\t\tbreak;\r\n\t\t// LDA\r\n\t\tcase 5:\r\n\t\t\tregisters.ac = memory[data];\r\n\t\t\tbreak;\r\n\t\t// BRA\r\n\t\tcase 6:\r\n\t\t\tregisters.pc = data;\r\n\t\t\tbreak;\r\n\t\t// BRZ\r\n\t\tcase 7:\r\n\t\t\tif(registers.ac == 0)\r\n\t\t\t\tregisters.pc = data;\r\n\t\t\tbreak;\r\n\t\t// BRP\r\n\t\tcase 8:\r\n\t\t\tif(registers.ac >= 0)\r\n\t\t\t\tregisters.pc = data;\r\n\t\t\tbreak;\r\n\t\t// INP / OUT\r\n\t\tcase 9:\r\n\t\t\tif(data === 1) {\r\n\t\t\t\twaitingForInput = true;\r\n\t\t\t}\r\n\t\t\telse if(data === 2) {\r\n\t\t\t\toutput += registers.ac + \"\\n\";\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\t\r\n\t}\r\n\r\n\treturn {\r\n\t\tmemory,\r\n\t\tip: registers.pc,\r\n\t\tregisters,\r\n\t\toutput,\r\n\t\thalt,\r\n\t\twaitingForInput\r\n\t}\r\n}","import './App.css';\n\nimport Editor from \"@monaco-editor/react\";\nimport { useRef, useState } from 'react';\nimport { assemble } from './assembler';\nimport { step } from './emulator';\n\nconst defaultString = \"        LDA VALA\\n        ADD VALB\\n        HLT\\nVALA    DAT 12\\nVALB    DAT 15\";\n\nfunction App() {\n\n\tconst editorRef = useRef(null);\n\n\tconst [memory, setMemory] = useState(Array(100).fill(0));\n\tconst [currentIp, setCurrentIp] = useState(0)\n\tconst [registers, setRegisters] = useState({\n\t\t\"pc\": 0,\n\t\t\"ir\": 0,\n\t\t\"ar\": 0,\n\t\t\"ac\": 0\n\t})\n\tconst [output, setOutput] = useState(\"\")\n\tconst [input, setInput] = useState(\"\")\n\n\tlet enteringInput = false;\n\n\tconst handleEditorDidMount = (editor, monaco) => {\n\t\teditorRef.current = editor;\n\t}\n\n\tconst onInputChanged = (event) => {\n\t\tsetInput(event.target.value)\n\t}\n\n\tconst onInputSubmitted = (event) => {\n\t\tenteringInput = true;\n\t\tevent.preventDefault()\n\t}\n\n\tconst assembleCode = () => {\n\t\tconst assembledMemory = assemble(editorRef.current.getValue())\n\n\t\tsetMemory(assembledMemory)\n\t}\n\n\tconst runCode = () => {\n\t\tlet localMem = memory;\n\t\tlet ip = 0;\n\t\tlet localReg = {\n\t\t\t\"pc\": 0,\n\t\t\t\"ir\": 0,\n\t\t\t\"ar\": 0,\n\t\t\t\"ac\": 0\n\t\t};\n\t\tlet halt = false;\n\t\tlet out = \"\"\n\t\tlet waitingForInput = false\n\t\twhile(!halt && ip < 100) {\n\t\t\t({ memory: localMem, ip, registers: localReg, halt, output: out, waitingForInput } = step(localMem, ip, localReg, out, null))\n\t\t}\n\t\tif(ip >= 100) ip = 99;\n\t\tsetCurrentIp(ip)\n\t\tsetRegisters(localReg)\n\t\tsetMemory(localMem)\n\t\tsetOutput(out)\n\t}\n\n\tconst renderMemory = () => {\n\t\tconst per10mem = [];\n\t\tfor(let i = 0; i < memory.length; i += 10) {\n\t\t\tconst chunk = memory.slice(i, i + 10);\n\t\t\tper10mem.push(chunk);\n\t\t}\n\n\t\treturn per10mem.map((values, i) => {\n\t\t\treturn <div className=\"memory-row\" key={\"memory\" + i}>\n\t\t\t\t<p className=\"memory-item\">{i * 10}: </p>\n\t\t\t\t<>{\n\t\t\t\t\tvalues.map((value, j) => <p className={`memory-item ${i * 10 + j === currentIp ? \"green-border\" : \"\"}`} key={\"item\" + i * 10 + j}>{value}</p>)\n\t\t\t\t}</>\n\t\t\t</div>\n\t\t})\n\t}\n\n\tconst renderRegisters = () => {\n\t\tconst regToName = {\n\t\t\t\"pc\": \"Program Counter\",\n\t\t\t\"ir\": \"Instruction\",\n\t\t\t\"ar\": \"Address\",\n\t\t\t\"ac\": \"Accumulator\"\n\t\t}\n\n\t\treturn Object.entries(registers).map(([register, value]) => <p className={register === \"pc\" ? \"green-border\" : \"\"} key={register}>{regToName[register]}: {value}</p>)\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1 className=\"title\">Little Man Computer</h1>\n\t\t\t<div className=\"buttons\">\n\t\t\t\t<button onClick={assembleCode}>Assemble (to RAM)</button>\n\t\t\t\t<button onClick={runCode}>Run</button>\n\t\t\t</div>\n\t\t\t<main>\n\t\t\t\t<Editor height=\"90vh\" width=\"45vw\" theme=\"vs-dark\" defaultValue={defaultString} onMount={handleEditorDidMount} />\n\t\t\t\t<div className=\"monitor\">\n\t\t\t\t\t<label htmlFor=\"ioinput\">Input</label>\n\t\t\t\t\t<input type=\"text\" name=\"ioinput\" value={input} onChange={onInputChanged} onSubmit={onInputSubmitted} />\n\t\t\t\t\t<div className=\"mem-reg-container\">\n\t\t\t\t\t\t<div className=\"memory\">\n\t\t\t\t\t\t\t<h2>Memory</h2>\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{renderMemory()}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"registers\">\n\t\t\t\t\t\t\t<h2>Registers</h2>\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{renderRegisters()}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"output-box\">\n\t\t\t\t\t\t\t<h2>Output</h2>\n\t\t\t\t\t\t\t<hr />\n\t\t\t\t\t\t\t<p className=\"output\">\n\t\t\t\t\t\t\t\t{output}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}