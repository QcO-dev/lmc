{"version":3,"sources":["assembler.js","emulator.js","App.js","index.js"],"names":["INSTRUCTIONS","UNARY_INSTRUCTIONS","UNARY_INSTRUCTION_CODE_MAP","BINARY_INSTRUCTION_FIRST_VALUE","assemble","source","memory","Array","fill","lines","split","filter","v","length","map","l","i","replace","w","word","line","isNaN","parseInt","parseFloat","includes","type","value","match","toToken","toUpperCase","labels","ip","slice","words","flat","error","errorLoc","memoryAddress","instruction","opcode","operand","form","toString","padStart","step","inIp","registers","output","wasWaitingForInput","input","pc","strMemValue","data","ir","ar","halt","waitingForInput","ac","offset","location","String","fromCharCode","defaultString","join","App","editorRef","useRef","useState","setMemory","currentIp","setCurrentIp","setRegisters","setOutput","setError","setInput","setWaitingForInput","isHalted","setHalted","changedMemoryAddresses","setChangedMemoryAddresses","isAccumulatorChanged","setAccumulatorChanged","inputSpeed","setInputSpeed","speed","setSpeed","submitRef","loopRef","getColourBorder","condition","subcondition","stopCode","clearInterval","current","className","onClick","assembleResult","getValue","assembleCode","localMem","localReg","out","waiting","setInterval","memoryBefore","accumulatorBefore","changedMem","push","height","width","theme","defaultValue","onMount","editor","_monaco","onSubmit","event","preventDefault","autoComplete","autoCapitalize","autoCorrect","htmlFor","name","onChange","target","per10mem","chunk","values","j","renderMemory","regToName","Object","entries","register","style","minWidth","renderRegisters","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d109bb30.chunk.js","sourcesContent":["// Returns the memory array\r\n\r\nconst INSTRUCTIONS = [\"LDA\", \"STA\", \"LOA\", \"ADD\", \"SUB\", \"INP\", \"OUT\", \"OTC\", \"HLT\", \"BRZ\", \"BRP\", \"BRA\", \"DAT\"];\r\nconst UNARY_INSTRUCTIONS = [\"INP\", \"OUT\", \"OTC\", \"HLT\"];\r\n\r\nconst UNARY_INSTRUCTION_CODE_MAP = {\r\n\t\"INP\": 901,\r\n\t\"OUT\": 902,\r\n\t\"OTC\": 912,\r\n\t\"HLT\": 0\r\n}\r\n\r\nconst BINARY_INSTRUCTION_FIRST_VALUE = {\r\n\t\"LDA\": \"5\",\r\n\t\"STA\": \"3\",\r\n\t\"LOA\": \"4\",\r\n\t\"ADD\": \"1\",\r\n\t\"SUB\": \"2\",\r\n\t\"BRZ\": \"7\",\r\n\t\"BRP\": \"8\",\r\n\t\"BRA\": \"6\",\r\n\t\"DAT\": \"\"\r\n}\r\n\r\nconst toToken = (word, line) => {\r\n\tif(!isNaN(word) && parseInt(word) === parseFloat(word)) {\r\n\t\treturn {\r\n\t\t\ttype: \"int\",\r\n\t\t\tvalue: parseInt(word),\r\n\t\t\tline\r\n\t\t}\r\n\t}\r\n\telse if(INSTRUCTIONS.includes(word)) {\r\n\t\treturn {\r\n\t\t\ttype: \"instruction\",\r\n\t\t\tvalue: word,\r\n\t\t\tline\r\n\t\t}\r\n\t}\r\n\telse if(word.match(/^[A-Z][A-Z0-9]+$/)) {\r\n\t\treturn {\r\n\t\t\ttype: \"label\",\r\n\t\t\tvalue: word,\r\n\t\t\tline\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\treturn {\r\n\t\t\ttype: \"invalid\",\r\n\t\t\tvalue: word,\r\n\t\t\tline\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const assemble = (source) => {\r\n\tconst memory = new Array(100).fill(0);\r\n\r\n\tconst rawLines = source.split(/\\r?\\n/).filter(v => v.length !== 0);\r\n\r\n\tlet lines = rawLines.map((l, i) => l.replace(/\\/\\/.*?$/, \"\").split(/\\s+/).filter(v => v.length !== 0).map(w => toToken(w.toUpperCase(), i + 1)))\r\n\t\t\t\t.filter(l => l.length !== 0);\r\n\r\n\tconst labels = {}\r\n\tlet ip = 0;\r\n\tfor(let i = 0; i < lines.length; i++) {\r\n\t\tlet line = lines[i];\r\n\r\n\t\tif(line[0].type === \"label\") {\r\n\t\t\tlabels[line[0].value] = ip;\r\n\t\t\tlines[i] = line = line.slice(1)\r\n\t\t}\r\n\t\tip += line.filter(w => w.type === \"instruction\").length;\r\n\t}\r\n\tlines = lines.filter(l => l.length !== 0)\r\n\r\n\tconst words = lines.flat();\r\n\r\n\tfor(let word of words) {\r\n\t\tif(word.type === \"invalid\")\r\n\t\t\treturn {\r\n\t\t\t\tmemory: new Array(100).fill(0),\r\n\t\t\t\terror: `Unexpected token ${word.value}`,\r\n\t\t\t\terrorLoc: word\r\n\t\t\t}\r\n\t}\r\n\r\n\tlet memoryAddress = 0;\r\n\tfor(let i = 0; i < words.length; i++) {\r\n\t\tconst word = words[i];\r\n\r\n\t\tif(word.type === \"instruction\") {\r\n\t\t\tconst instruction = word.value;\r\n\r\n\t\t\tif(UNARY_INSTRUCTIONS.includes(instruction)) {\r\n\t\t\t\tmemory[memoryAddress] = UNARY_INSTRUCTION_CODE_MAP[instruction];\r\n\t\t\t\tmemoryAddress++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconst opcode = BINARY_INSTRUCTION_FIRST_VALUE[instruction];\r\n\r\n\t\t\t\tconst operand = words[i + 1];\r\n\r\n\t\t\t\tlet form = opcode;\r\n\r\n\t\t\t\tif(operand.type === \"int\") {\r\n\t\t\t\t\tif(instruction === \"DAT\")\r\n\t\t\t\t\t\tform = operand.value.toString()\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tform += operand.value.toString().padStart(2, '0')\r\n\t\t\t\t}\r\n\t\t\t\telse if(operand.type === \"label\") {\r\n\t\t\t\t\tif(!(operand.value in labels)) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmemory: new Array(100).fill(0),\r\n\t\t\t\t\t\t\terror: `Label ${operand.value} is not bound`,\r\n\t\t\t\t\t\t\terrorLoc: word\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(instruction === \"DAT\")\r\n\t\t\t\t\t\tform = labels[operand.value].toString()\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tform += labels[operand.value].toString().padStart(2, '0');\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tmemory: new Array(100).fill(0),\r\n\t\t\t\t\t\terror: `Expected value, got ${operand.value}`,\r\n\t\t\t\t\t\terrorLoc: word\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(form.length > 3) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tmemory: new Array(100).fill(0),\r\n\t\t\t\t\t\terror: `Values cannot exceed 3 digits (got ${form})`,\r\n\t\t\t\t\t\terrorLoc: word\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tmemory[memoryAddress] = parseInt(form)\r\n\t\t\t\tmemoryAddress++;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn {\r\n\t\t\t\tmemory: new Array(100).fill(0),\r\n\t\t\t\terror: `Expected instruction, got ${word.value}`,\r\n\t\t\t\terrorLoc: word\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(memoryAddress > 99) {\r\n\t\t\treturn {\r\n\t\t\t\tmemory: new Array(100).fill(0),\r\n\t\t\t\terror: `Exceeded memory capacity of 100 @ ${word.value}`,\r\n\t\t\t\terrorLoc: word\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tmemory,\r\n\t\terror: null,\r\n\t\terrorLoc: null\r\n\t};\r\n}","export const step = (memory, inIp, registers, output, wasWaitingForInput, input) => {\r\n\tregisters.pc = inIp;\r\n\tconst memValue = memory[registers.pc++];\r\n\r\n\tconst strMemValue = memValue.toString().padStart(3, '0')\r\n\tconst instruction = parseInt(strMemValue[0])\r\n\tconst data = parseInt(strMemValue[1]) * 10 + parseInt(strMemValue[2])\r\n\r\n\tregisters.ir = instruction;\r\n\tregisters.ar = data;\r\n\r\n\tlet halt = false;\r\n\tlet waitingForInput = false;\r\n\r\n\tif(wasWaitingForInput && input) {\r\n\t\tregisters.ac = parseInt(input)\r\n\t}\r\n\r\n\tswitch(instruction) {\r\n\t\t// HLT\r\n\t\tcase 0:\r\n\t\t\thalt = true;\r\n\t\t\tbreak;\r\n\t\t// ADD\r\n\t\tcase 1:\r\n\t\t\tregisters.ac = registers.ac + memory[data];\r\n\t\t\tbreak;\r\n\t\t// SUB\r\n\t\tcase 2:\r\n\t\t\tregisters.ac = registers.ac - memory[data];\r\n\t\t\tbreak;\r\n\t\t// STA\r\n\t\tcase 3:\r\n\t\t\tmemory[data] = registers.ac;\r\n\t\t\tbreak;\r\n\t\t// LOA\r\n\t\tcase 4: {\r\n\t\t\tconst offset = registers.ac;\r\n\t\t\tconst location = data + offset >= 100 ? 99 : data + offset;\r\n\r\n\t\t\tregisters.ac = memory[location];\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\t// LDA\r\n\t\tcase 5:\r\n\t\t\tregisters.ac = memory[data];\r\n\t\t\tbreak;\r\n\t\t// BRA\r\n\t\tcase 6:\r\n\t\t\tregisters.pc = data;\r\n\t\t\tbreak;\r\n\t\t// BRZ\r\n\t\tcase 7:\r\n\t\t\tif(registers.ac === 0)\r\n\t\t\t\tregisters.pc = data;\r\n\t\t\tbreak;\r\n\t\t// BRP\r\n\t\tcase 8:\r\n\t\t\tif(registers.ac >= 0)\r\n\t\t\t\tregisters.pc = data;\r\n\t\t\tbreak;\r\n\t\t// INP / OUT\r\n\t\tcase 9:\r\n\t\t\tif(data === 1) {\r\n\t\t\t\twaitingForInput = true;\r\n\t\t\t}\r\n\t\t\telse if(data === 2) {\r\n\t\t\t\toutput += registers.ac + \" \";\r\n\t\t\t}\r\n\t\t\telse if(data === 12) {\r\n\t\t\t\toutput += String.fromCharCode(registers.ac);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\t// NOP\r\n\t\t\tbreak;\r\n\t}\r\n\r\n\treturn {\r\n\t\tmemory,\r\n\t\tip: registers.pc,\r\n\t\tregisters,\r\n\t\toutput,\r\n\t\thalt,\r\n\t\twaitingForInput\r\n\t}\r\n}","import './App.css';\n\nimport Editor from \"@monaco-editor/react\";\nimport { useRef, useState } from 'react';\nimport { assemble } from './assembler';\nimport { step } from './emulator';\n\nconst defaultString = [\n\t\"// Input two numbers, sum them, and output the result\",\n\t\"        INP\",\n\t\"        STA FIRST\",\n\t\"        INP\",\n\t\"        ADD FIRST\",\n\t\"        OUT\",\n\t\"        HLT\",\n\t\"FIRST   DAT 0\"\n].join(\"\\n\");\n\nfunction App() {\n\n\tconst editorRef = useRef(null);\n\n\tconst [memory, setMemory] = useState(Array(100).fill(0));\n\tconst [currentIp, setCurrentIp] = useState(0)\n\tconst [registers, setRegisters] = useState({\n\t\t\"pc\": 0,\n\t\t\"ir\": 0,\n\t\t\"ar\": 0,\n\t\t\"ac\": 0\n\t})\n\tconst [output, setOutput] = useState(\"\")\n\tconst [error, setError] = useState(\"\")\n\tconst [input, setInput] = useState(\"\")\n\tconst [waitingForInput, setWaitingForInput] = useState(false)\n\tconst [isHalted, setHalted] = useState(false)\n\tconst [changedMemoryAddresses, setChangedMemoryAddresses] = useState([])\n\tconst [isAccumulatorChanged, setAccumulatorChanged] = useState(false)\n\tconst [inputSpeed, setInputSpeed] = useState(\"\")\n\tconst [speed, setSpeed] = useState(60)\n\tconst submitRef = useRef(null)\n\tconst loopRef = useRef(null)\n\n\tconst handleEditorDidMount = (editor, _monaco) => {\n\t\teditorRef.current = editor;\n\t}\n\n\tconst getColourBorder = (condition, subcondition) => {\n\t\tif (condition) {\n\t\t\tif (subcondition) {\n\t\t\t\treturn \"red-border\";\n\t\t\t}\n\t\t\treturn \"green-border\";\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tconst onInputChanged = (event) => {\n\t\tsetInput(event.target.value)\n\t}\n\n\tconst onInputSubmitted = (event) => {\n\t\tsubmitRef.current = input\n\t\tsetInput(\"\")\n\t\tevent.preventDefault()\n\t}\n\n\tconst onSpeedChanged = (event) => {\n\t\tsetInputSpeed(event.target.value)\n\t}\n\n\tconst onSpeedSubmitted = (event) => {\n\t\tlet speed = parseInt(inputSpeed) || 60\n\t\tif(speed <= 0) {\n\t\t\tspeed = 60\n\t\t}\n\t\tsetInputSpeed(\"\")\n\t\tsetSpeed(speed)\n\t\tevent.preventDefault()\n\t}\n\n\tconst assembleCode = () => {\n\t\tconst assembleResult = assemble(editorRef.current.getValue())\n\n\t\tif(!assembleResult.error) {\n\t\t\tsetMemory(assembleResult.memory)\n\t\t\tsetError(\"\")\n\t\t}\n\t\telse {\n\t\t\tsetError(`[${assembleResult.errorLoc.line}]: ${assembleResult.error}`)\n\t\t}\n\t}\n\n\tconst runCode = () => {\n\t\tif(error !== \"\") return;\n\t\tlet localMem = memory;\n\t\tlet ip = 0;\n\t\tlet localReg = {\n\t\t\t\"pc\": 0,\n\t\t\t\"ir\": 0,\n\t\t\t\"ar\": 0,\n\t\t\t\"ac\": 0\n\t\t};\n\t\tlet halt = false;\n\t\tlet out = \"\"\n\n\t\tlet waiting = false\n\t\tloopRef.current = setInterval(() => {\n\t\t\tif (waiting && !submitRef.current)\n\t\t\t\treturn;\n\n\t\t\tconst memoryBefore = [...localMem];\n\t\t\tconst accumulatorBefore = localReg[\"ac\"];\n\n\t\t\t({ memory: localMem, ip, registers: localReg, halt, output: out, waitingForInput: waiting } = step(localMem, ip, localReg, out, waiting, submitRef.current))\n\t\t\tif (submitRef.current)\n\t\t\t\tsubmitRef.current = null\n\n\t\t\tif (halt || ip >= 100) {\n\t\t\t\tclearInterval(loopRef.current)\n\t\t\t\tloopRef.current = null\n\t\t\t}\n\n\t\t\tif (ip >= 100) ip = 99;\n\t\t\tsetCurrentIp(ip)\n\t\t\tsetRegisters(localReg)\n\t\t\tsetMemory(localMem)\n\t\t\tsetOutput(out)\n\t\t\tsetWaitingForInput(waiting)\n\t\t\tsetHalted(halt)\n\n\t\t\tlet changedMem = []\n\t\t\tfor(let i = 0; i < localMem.length; i++) {\n\t\t\t\tif(memoryBefore[i] !== localMem[i]) {\n\t\t\t\t\tchangedMem.push(i)\n\t\t\t\t}\n\t\t\t}\n\t\t\tsetChangedMemoryAddresses(changedMem)\n\t\t\tsetAccumulatorChanged(accumulatorBefore !== localReg[\"ac\"])\n\t\t}, 1000 / speed)\n\t}\n\n\tconst stopCode = () => {\n\t\tclearInterval(loopRef.current)\n\t}\n\n\tconst stepCode = () => {\n\t\tif(error !== \"\") return;\n\t\tclearInterval(loopRef.current)\n\n\t\tif (waitingForInput && !submitRef.current)\n\t\t\treturn;\n\t\tif (isHalted || currentIp >= 100)\n\t\t\treturn;\n\n\t\tlet localMem = memory;\n\t\tlet ip = currentIp;\n\t\tlet localReg = registers;\n\t\tlet halt = isHalted;\n\t\tlet out = \"\"\n\n\t\tlet waiting = waitingForInput;\n\n\t\tconst memoryBefore = [...localMem];\n\t\tconst accumulatorBefore = localReg[\"ac\"];\n\n\t\t({ memory: localMem, ip, registers: localReg, halt, output: out, waitingForInput: waiting } = step(localMem, ip, localReg, out, waiting, submitRef.current))\n\t\tif (submitRef.current)\n\t\t\tsubmitRef.current = null\n\n\t\tif (halt || ip >= 100) {\n\t\t\tclearInterval(loopRef.current)\n\t\t\tloopRef.current = null\n\t\t}\n\n\t\tif (ip >= 100) ip = 99;\n\t\tsetCurrentIp(ip)\n\t\tsetRegisters(localReg)\n\t\tsetMemory(localMem)\n\t\tsetOutput(out)\n\t\tsetWaitingForInput(waiting)\n\t\tsetHalted(halt)\n\t\t\n\t\tlet changedMem = []\n\t\tfor(let i = 0; i < localMem.length; i++) {\n\t\t\tif(memoryBefore[i] !== localMem[i]) {\n\t\t\t\tchangedMem.push(i)\n\t\t\t}\n\t\t}\n\t\tsetChangedMemoryAddresses(changedMem)\n\t\tsetAccumulatorChanged(accumulatorBefore !== localReg[\"ac\"])\n\t}\n\n\tconst reset = () => {\n\t\tstopCode()\n\t\tassembleCode()\n\t\tsetCurrentIp(0)\n\t\tsetRegisters({\n\t\t\t\"pc\": 0,\n\t\t\t\"ir\": 0,\n\t\t\t\"ar\": 0,\n\t\t\t\"ac\": 0\n\t\t})\n\t\tsetOutput(\"\")\n\t\tsetWaitingForInput(false)\n\t\tsetHalted(false)\n\t\tsetChangedMemoryAddresses([])\n\t\tsetAccumulatorChanged(false)\n\t}\n\n\tconst renderMemory = () => {\n\t\tconst per10mem = [];\n\t\tfor (let i = 0; i < memory.length; i += 10) {\n\t\t\tconst chunk = memory.slice(i, i + 10);\n\t\t\tper10mem.push(chunk);\n\t\t}\n\n\t\treturn per10mem.map((values, i) => {\n\t\t\treturn <div className=\"memory-row\" key={\"memory\" + i}>\n\t\t\t\t<p className=\"memory-item\">{i * 10}: </p>\n\t\t\t\t<>{\n\t\t\t\t\tvalues.map((value, j) => <p className={`memory-item ${getColourBorder(i * 10 + j === currentIp, isHalted)} ${changedMemoryAddresses.includes(i * 10 + j) ? \"yellow-border\" : \"\"}`} key={\"item\" + i * 10 + j}>{value}</p>)\n\t\t\t\t}</>\n\t\t\t</div>\n\t\t})\n\t}\n\n\tconst renderRegisters = () => {\n\t\tconst regToName = {\n\t\t\t\"pc\": \"Program Counter\",\n\t\t\t\"ir\": \"Instruction\",\n\t\t\t\"ar\": \"Address\",\n\t\t\t\"ac\": \"Accumulator\"\n\t\t}\n\n\t\treturn Object.entries(registers).map(([register, value]) => <p style={{ minWidth: regToName[register].length + 2 + 3 + \"ch\" }} className={`register ${getColourBorder(register === \"pc\", isHalted)} ${((register === \"ac\" && isAccumulatorChanged) ? \"yellow-border\" : \"\")}`} key={register}>{regToName[register]}: {value}</p>)\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1 className=\"title\">Little Man Computer</h1>\n\t\t\t<div className=\"buttons\">\n\t\t\t\t<button onClick={reset}>Assemble To RAM (reset)</button>\n\t\t\t\t<button onClick={runCode}>Run</button>\n\t\t\t\t<button onClick={() => { if(error !== \"\") return; stopCode(); setHalted(true); }}>Stop</button>\n\t\t\t\t<button onClick={stepCode}>Step</button>\n\t\t\t</div>\n\t\t\t<main>\n\t\t\t\t<Editor height=\"90vh\" width=\"45vw\" theme=\"vs-dark\" defaultValue={defaultString} onMount={handleEditorDidMount} />\n\t\t\t\t<div className=\"monitor\">\n\t\t\t\t\t<div className=\"forms\">\n\t\t\t\t\t\t<form onSubmit={onInputSubmitted} className=\"input-form\" autoComplete=\"off\" autoCapitalize=\"off\" autoCorrect=\"off\">\n\t\t\t\t\t\t\t<label htmlFor=\"ioinput\" className={waitingForInput ? \"green-border\" : \"\"}>Input</label>\n\t\t\t\t\t\t\t<input type=\"text\" name=\"ioinput\" value={input} onChange={onInputChanged} />\n\t\t\t\t\t\t</form>\n\t\t\t\t\t\t<form onSubmit={onSpeedSubmitted}>\n\t\t\t\t\t\t\t<label htmlFor=\"runspeed\">Speed (Current: {speed}Hz)</label>\n\t\t\t\t\t\t\t<input type=\"number\" name=\"runspeed\" value={inputSpeed} onChange={onSpeedChanged} />\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"mem-reg-container\">\n\t\t\t\t\t\t<div className=\"memory\">\n\t\t\t\t\t\t\t<h2>Memory</h2>\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{renderMemory()}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"registers\">\n\t\t\t\t\t\t\t<h2>Registers</h2>\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{renderRegisters()}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"output-box\">\n\t\t\t\t\t\t<h2>Output</h2>\n\t\t\t\t\t\t<p className={`output ${error !== \"\" ? \"error-output\" : \"\"}`}>\n\t\t\t\t\t\t\t{error === \"\" ? output : error}\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}